import org.apache.tools.ant.filters.ReplaceTokens
import java.text.SimpleDateFormat

buildscript {
    ext {
        kotlinVersion = '1.2.20'
        springBootVersion = '2.0.0.RC1'
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'kotlin-kapt'

group = 'ru.michaelilyin'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

repositories {
	mavenLocal()
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

dependencyManagement {
    imports {
        mavenBom 'org.keycloak.bom:keycloak-adapter-bom:4.0.0.CR1-SNAPSHOT'
    }
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-aop')
	compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-websocket')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile("org.springframework.boot:spring-boot-devtools")
    compile('com.fasterxml.jackson.module:jackson-module-kotlin')
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    compile("org.jetbrains.kotlin:kotlin-reflect")
	compile('org.springframework.boot:spring-boot-devtools')
    compile('org.postgresql:postgresql')
    compile('org.liquibase:liquibase-core:3.5.5')
	compile('com.graphql-java:graphiql-spring-boot-starter:4.0.0.M1')
	compile('com.graphql-java:graphql-spring-boot-starter:4.0.0.M1')
    compile('com.graphql-java:graphql-java-tools:4.3.0')
    compile('io.github.microutils:kotlin-logging:1.4.9')

    compile('org.keycloak:keycloak-spring-boot-2-starter:4.0.0.CR1-SNAPSHOT')
//    compile('org.keycloak:keycloak-adapter:4.0.0.CR1-SNAPSHOT')

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.security:spring-security-test')
}

processResources {
    filter(ReplaceTokens, tokens:[
            'project.version': project.version,
            'project.build.time': buildTime()
    ])
}

static def buildTime() {
    def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}